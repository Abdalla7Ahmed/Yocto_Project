** Basic Variables
basic default variables used in the Yocto build system.

Basic Variables
PN (Package Name)
PV (Package Version)
PR (Package Revision)
WORKDIR (Working Directory)
S (Source)
D (Destination)
B (Build Directory)
Recipe Name Pattern
PN_PV_PR.bb

Example:

example2_0.2_r0

How to Read Variable Value
bitbake -e <RECIPE_NAME> | grep ^<VARIABLE_NAME>=
Package Name (PN)
PN refers to a recipe name used by the Yocto build system as input to create a package. The name is extracted from the recipe file name.

Package Version (PV)
PV is the version of the recipe. The version is normally extracted from the recipe filename.

Package Revision (PR)
The revision of the recipe. The default value for this variable is “r0”

Working Directory (WORKDIR)
The WORKDIR is the pathname of the work directory in which the Yocto build system builds a recipe. This directory is located within the TMPDIR directory structure and is specific to the recipe being built and the system for which it is being built.

Source (S)
S is the location in the Build Directory where unpacked recipe source code resides. By default, this directory is WORKDIR/BPN-PV, where BPN is the base recipe name and PV is the recipe version.

Destination (D)
D is the destination directory. It is the location in the Build Directory where components are installed by the do_install task. This location defaults to WORKDIR/image.

Build Directory (B)
It is same as S.
ommands :- 
$bitbake -e example | grep ^PN=			--> PN="example"
$bitbake -e example | grep ^PV=			--> PV="0.1"     default 0.1 if not set 
$bitbake -e example | grep ^PR=			--> PR="r0"      default r0 if not set 
$bitbake -e example | grep ^WORKDIR=	--> WORKDIR="/home/abdallah/poky/build/tmp/work/core2-64-poky-linux/example/0.1-r0"
$bitbake -e example | grep ^S=			--> S="/home/abdallah/poky/build/tmp/work/core2-64-poky-linux/example/0.1-r0/example-0.1"
$bitbake -e example | grep ^B=			--> B="/home/abdallah/poky/build/tmp/work/core2-64-poky-linux/example/0.1-r0/example-0.1"				   // source code 
$bitbake -e example | grep ^D=			--> B="/home/abdallah/poky/build/tmp/work/core2-64-poky-linux/example/0.1-r0/example-0.1/image"            // usr/bin location the file in root filesystem
=======================================================================================
** Variable Assignment
What are you going to learn?
In this Video we are goin to learn about Types of Variable Assignments.

Types of Variable Assignments
?=  		-->This is used to assign the default value to varibale. It can be overridden.
??= 		-->This is used to assign the default value to varibale. But it is a weak assignment. It can be overridden. If multiple assignments are done with this type, the the last one will be considered.
=   		-->This is a simple variable assignment. It requires " " and spaces are significant. But variables are expanded at the end.
:=  		-->This is an immediate variable expansion. The value assigned is expanded immediately.
+=  		-->This appends a value to a variable. The operator inserts a space between the current value and appended value. It takes effect immediately.
=+  		-->This prepends a value to a variable, The operator inserts a space between the current value and prepended value. It takes effect immediately.
.=  		-->This appends a value to a variable. The operator inserts no space between the current value and appended value. It takes effect immediately.
=.  		-->This prepends a value to a variable. The operator inserts no space between the current value and prepended value. It takes effect immediately.
:append :   -->This appends a value to a variable. The operator inserts no space between the current value and appended value. The effects are applied at variable expansion time rather than being immediately applied.
:prepend :  -->This appends a value to a variable. The operator inserts no space between the current value and appended value. The effects are applied at variable expansion time rather than being immediately applied.
:remove :   -->This remove values from lists. Specifying a value for removal causes all occurrences of that value to be removed from the variable.
========================================================================================
** Variable Assignment Operators _ Setting Default Value _=, __=
How to Read Variable Value
bitbake -e <RECIPE_NAME> | grep ^<VARIABLE_NAME>=

Assignment Type ?=
TEST ?= "foo"
TEST ?= "bar"
TEST ?= "val"
TEST ?= "var"
# The final value is TEST="foo" 
Assignment Type ??=
TEST ??= "foo"
TEST ??= "bar"
TEST ??= "val"
TEST ??= "var"
# The final value is TEST="var" 
TEST ??= "foo"
TEST ?= "bar"
TEST ?= "val"
TEST ??= "var"
# The final value is TEST="bar" 
========================================================================================
** Variable Assignment Operators  _ Overriding Default Value =, _=
Assignment Type =          variables are expanded at the end
# Override
A ?= "foo"
A = "bar"
# The final value is A="bar" 

# Variable Expansion=           
A = "foo"
B = "${A}"
A = "bar"
# The final value is B="bar" 

Assignment Type :=          expanded immediately
# Override
A ?= "foo"
A := "bar"

# The final value is A="bar" 

# Variable Expansion
A = "foo"
B := "${A}"
A = "bar"
# The final value is B="foo" 

========================================================================================
** Variable Assignment Operators  _ Append(+=) and Prepend(=+) with Spaces
Assignment Type += and =+
# Spaces are added here

# Append
A = "foo"
A += "bar"

# The final value is A="foo bar" 

# Prepend
B = "foo"
B =+ "bar"

# The final value is B="bar foo"

# Append
A ?= "val"
A += "var"

# The final value is A="var"

# Prepend
B ??= "val"
B =+ "var"

# The final value is B="var"
========================================================================================
** Variable Assignment Operators  _ Append(.=) _ Prepend(=.) without Spaces
Assignment Type .= and =.
# No Spaces are added here
# Needs to add extra space

# Append
A = "foo"
A .= "bar"

# The final value is A="foobar" 

# Prepend
B = "foo"
B =. "bar"

# The final value is B="barfoo"
========================================================================================
** Variable Assignment Operators - -append -prepend and -remove  all The effects are applied at variable expansion time rather than being immediately applied 
Assignment Type :append, :prepend and :remove
# No Spaces are added here
# Needs to add extra space
# Parsed at the end

# Append
A = "foo"
A:append = "bar"
# The final value is A="foobar" 

# Append
A = "foo"
A:append = "bar"
A += "val"
# The final value is A="foo valbar" 

# Append
A = "foo"
A:append = " bar"
# The final value is A="foo bar" 


# Prepend
A = "foo"
A:prepend = "bar"
# The final value is A="barfoo" 

# Prepend
A = "foo"
A:prepend = "bar"
A =+ "val"
# The final value is A="barval foo" 

# Prepend
A = "foo"
A:prepend = "bar "
# The final value is A="bar foo" 

#remove

A = "foo bar"
A:remove = "foo"
# The final value is A=" bar" 

A = "foo bar"
A:remove = "var"
A += "var"
# The final value is A=" foo bar" 
===========================================================================
The flag -Wl,--hash-style=gnu is a linker option that is typically used when compiling C or C++ programs. Let's break down its components:

-Wl: This option is used to pass an option directly to the linker (ld).
--hash-style=gnu: This is a linker option that specifies the symbol hash table style to be used. 
In this case, gnu refers to the GNU hash style.
The symbol hash table is a data structure used by the linker to efficiently 
look up symbols during the linking process. The GNU hash style is a hashing algorithm used by
 the GNU linker, ld, to organize and access symbols.

By specifying -Wl,--hash-style=gnu, you are instructing the linker to 
use the GNU hash style for symbol hashing. This is the default behavior for 
most modern GNU-based toolchains, so explicitly specifying this option is often
 unnecessary unless you are configuring a specific linker behavior or your build environment requires it.

It's worth noting that the exact behavior and availability of linker options
 can vary depending on the specific toolchain and platform you are using. 
 It's always a good idea to consult the documentation or man pages 
 of the linker being used for more detailed information on specific linker options.
================================================================================
Customizing Package Provider _ PREFERRED_PROVIDER
if we have recepe use dependencie called (xyz) say library on it and (xyz)library is in more than one recepie and have 
the same alias using (PROVIDES) the bitbake will close the first one 
if we need to chose a specific one we can use :-  
PREFERRED_PROVIDER_my-package = "recipe1"
By setting PREFERRED_PROVIDER_my-package to "recipe1", 
you ensure that during the build, Yocto will use recipe1 as the preferred provider 
for the "my-package" package.

The PREFERRED_PROVIDER variable is typically used when there are alternative recipes for a package, 
and you want to select a specific one based on your requirements or constraints, 
such as preferring a recipe from a specific layer, a particular version, 
or a recipe with specific features or optimizations.

By controlling the preferred provider, you can customize the build and choose 
the most suitable recipe for your target system or application.
note that PREFERRED_PROVIDER_my-package = "recipe1" defined in local.conf file
===========================================================================
Mastering Package Version Selection with PREFERRED_VERSION _ With EXAMPLE
if we have more than version the bitbake will chose the latest one (last version) if we need a specific version 
we can use 
PREFERRED_VERSION_my-package = "1.2.3"
By setting PREFERRED_VERSION_my-package to "1.2.3", you ensure that during the build, Yocto will prioritize using version 1.2.3 of the "my-package" package if it is available.

The PREFERRED_VERSION variable can accept various version specifications, including exact versions, version ranges, and wildcards. For example:

PREFERRED_VERSION_my-package = ">=1.0": Select any version of "my-package" that is equal to or greater than version 1.0.
PREFERRED_VERSION_my-package = "1.2.*": or PREFERRED_VERSION_my-package = ">=1.0.%": Select any version of "my-package" that starts with 1.2 (e.g., 1.2.0, 1.2.1, 1.2.3).
PREFERRED_VERSION_my-package = "1.2.3-r0": Select the exact version 1.2.3 with the revision -r0.

The PREFERRED_VERSION variable allows you to control the version of a package used in the build, ensuring consistency and reproducibility across different build environments.

Please note that the availability of specific versions depends on the recipes and layers in your Yocto Project configuration.

note that PREFERRED_VERSION_my-package = "1.2.3" defined in local.conf file
========================================================
Comprehensive Guide to use oe_runmake - Building with Makefile
* yocto use oe_runmake for cross compilation for the file , it is a makefile use by yocto project recepies to copmpile tasks

we can write a make file and then simply use oe-runmake in the do_compile task to compile and in do_install task to install it 
we can path argument like 
oe_runmake install DESTDIR=$(D) BINDIR=$(binsir)
=========================================================
BBMASK _ Recipe Control for Debugging
In the Yocto Project and OpenEmbedded build system, 
the BBMASK variable is used to mask or exclude specific recipes or classes from being built. 
It allows you to selectively disable the build of certain recipes or classes based on your requirements.

The BBMASK variable is typically defined in the local configuration file (e.g., local.conf)
 or in a custom configuration layer. It takes a space-separated list of regular 
 expressions that match the names of recipes or classes to be masked.

When BBMASK is set, the build system will skip the recipes or classes 
that match the specified regular expressions. This means that the excluded recipes 
or classes will not be built or included in the final image.

Here's an example of how the BBMASK variable can be used:

BBMASK = "my-recipe-*"
In this example, the BBMASK variable is set to "my-recipe-*". 
This means that any recipe with a name starting with "my-recipe-" will be masked and excluded from the build.

You can use more complex regular expressions to specify multiple masks. For instance:

BBMASK = "my-recipe-* some-class-*"
In this case, both recipes starting with "my-recipe-" and classes starting with "some-class-"
 will be masked and excluded from the build.

The BBMASK variable is useful when you want to exclude specific recipes or classes 
from the build for various reasons, such as isolating problematic components, 
reducing build time, or customizing the set of packages included in the final image.

Please note that masking a recipe or class using BBMASK prevents it from being built,
 but it does not remove any previously built artifacts. To remove existing build artifacts, 
 you may need to clean the specific recipe or perform a clean build using 
$bitbake -c clean <recipe> or bitbake -c cleansstate <recipe>.
=========================================================
BBappend File _ Modifying Recipe using bbappend File
there is two types of recepies (original , append)
the original or base recepie is end with .bb and it is the base 
the append recepe end with .bbappend 
we use the append recepe over the original recepe if we need make some changes and don't need to effect on the original recepe like losing the modularity of the layer 
the append recepies used to do modification on the original recepies














